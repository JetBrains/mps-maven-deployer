initMpsHomeAndVersion()

group 'org.jetbrains.mps'
version mpsVersion

apply plugin: 'maven-publish'

project.ext.distsDir = new File(project.buildDir, 'dists')

// mps-maven-plugin depends on these libraries
def MPS_LIBS = ['mps-behavior-api', 'mps-behavior-runtime', 'mps-boot-util', 'mps-closures', 'mps-collections',
                'mps-core', 'mps-editor', 'mps-editor-api', 'mps-environment', 'mps-logging', 'mps-messaging',
                'mps-openapi', 'mps-platform', 'mps-tool', 'mps-tuples',
                'asm-all', 'jdom', 'platform', 'trove4j', 'util'] as String[]

// All jars from these directories are packaged into mps-modules:lar artifact
def LANGUAGE_DIRS = ['languages/languageDesign', 'languages/baseLanguage',
                            'languages/baseLanguage/jetbrains.mps.baseLanguage.unitTest.libs', 'languages/make',
                            'languages/util'] as String[]

task(clean) {
    delete project.buildDir
}

task(packageMpsLibsAsSingleJar, type: Jar) {
    archiveName "mps-libs-${project.version}.jar"
    destinationDir project.distsDir

    MPS_LIBS.each {
        from zipTree("${mpsHome}/lib/${it}.jar")
    }
}

task(packageMpsModulesAsLar, type: Jar) {
    archiveName "mps-modules-${project.version}.jar"
    destinationDir project.distsDir

    LANGUAGE_DIRS.each({ from(mpsHome + '/' + it) { include '*.jar' } })
    from(mpsHome + '/lib') { include 'mps-*.jar' }
}

publishing {
    publications {
        mpsLibs(MavenPublication) {
            artifact source: packageMpsLibsAsSingleJar
            artifact source: new File(mpsHome, 'lib/MPS-src.zip'), classifier: 'sources', extension: 'jar'
            artifactId 'mps-libs'
        }

        mpsModules(MavenPublication) {
            artifact source: packageMpsModulesAsLar, extension: 'lar'
            artifactId 'mps-modules'
        }
    }
}

if (hasProperty('repositoryUrl')) {
    publishing.repositories {
        maven {
            url repositoryUrl
            if (hasProperty('repositoryUsername')) {
                credentials {
                    username = repositoryUsername
                    password = repositoryPassword
                }
            }
        }
    }
}

private void initMpsHomeAndVersion() {
    if (!hasProperty('mpsHome')) {
        throw new GradleException("mpsHome property must be defined")
    }

    def versionFile = new File(mpsHome, 'build.number')

    def versionLine = versionFile.readLines().find({ it.startsWith("build.number=") })
    project.ext.mpsVersion = versionLine - "build.number="
    if (!mpsVersion) {
        throw new GradleException("Could not read MPS version from ${versionFile}")
    }

    println "MPS version ${mpsVersion} in ${mpsHome}"
}
