plugins {
    id 'base'
    id 'maven-publish'
    id 'de.undercouch.download' version '3.1.1'
}

// mps-driver depends on these libraries for compilation
def MPS_LIBS = ['mps-core', 'mps-openapi', 'ant/lib/ant-mps', 'mpsant/mps-tool', 'mps-annotations']

initMpsHomeAndVersion()

group 'org.jetbrains.mps'
version mpsVersion

task downloadMps(type: de.undercouch.gradle.tasks.download.Download) {
    src "http://download.jetbrains.com/mps/${mpsMajor}/MPS-${mpsVersion}.zip"
    dest "$buildDir/downloads/MPS-${mpsVersion}.zip"
    description "Downloads MPS ${mpsVersion}"
    overwrite false
}

task unpackMps(dependsOn: downloadMps) {
    description "Extracts downloaded MPS to $mpsHome"
    inputs.file downloadMps
    outputs.dir mpsHome

    doLast {
        copy {
            from zipTree(downloadMps.dest)
            into temporaryDir
        }
        delete mpsHome
        copy {
            from new File(temporaryDir, "MPS $mpsMajor")
            into mpsHome
        }
    }
}

task repackageMps(type: Zip, dependsOn: unpackMps) {
    baseName 'mps'
    from unpackMps
}

task packageMpsLibsAsSingleJar(type: Jar, dependsOn: unpackMps) {
    baseName 'mps-libs'

    MPS_LIBS.each {
        from zipTree("${mpsHome}/lib/${it}.jar")
    }
}

publishing {
    publications {
        mps(MavenPublication) {
            artifact source: repackageMps
            artifactId 'mps'
        }
        mpsLibs(MavenPublication) {
            artifact source: packageMpsLibsAsSingleJar
            artifact source: "$mpsHome/lib/MPS-src.zip", classifier: 'sources', extension: 'jar'
            artifactId 'mps-libs'
        }
    }

    if (project.hasProperty('repositoryUrl')) {
        repositories {
            maven {
                url project.repositoryUrl
                if (project.hasProperty('repositoryUsername')) {
                    credentials {
                        username = project.repositoryUsername
                        password = project.repositoryPassword
                    }
                }
            }
        }
    }
}

private void initMpsHomeAndVersion() {
    if (!hasProperty('mpsVersion')) {
        throw new GradleException("mpsVersion property must be defined")
    }

    ext.mpsMajor = mpsVersion.find(/^\d+\.\d+/)
    ext.mpsHome = "$buildDir/MPS-$mpsVersion"
}
